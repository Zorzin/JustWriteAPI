// <auto-generated />
using System;
using JustWriteAPI.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JustWriteAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20181117230617_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("JustWriteAPI.Models.Database.AgeRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("MinimalBirthday");

                    b.HasKey("Id");

                    b.ToTable("AgeRestrictions");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeRestrictionId");

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AgeRestrictionId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.ArticleActivity", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<int>("AuthorId");

                    b.Property<bool>("IsLiked");

                    b.Property<bool>("IsRepost");

                    b.Property<bool>("IsVisited");

                    b.Property<DateTime?>("LikeDate");

                    b.Property<DateTime?>("RepostDate");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("ArticleId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("ArticleActivities");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<int>("TagId");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.AuthorFollowing", b =>
                {
                    b.Property<int>("FollowingAuthorId");

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("FollowDate");

                    b.HasKey("FollowingAuthorId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorFollowings");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleId");

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("ParentCommentId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.CommentActivity", b =>
                {
                    b.Property<int>("CommentId");

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("ActivityDate");

                    b.Property<bool>("IsLiked");

                    b.HasKey("CommentId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("CommentActivities");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.Article", b =>
                {
                    b.HasOne("JustWriteAPI.Models.Database.AgeRestriction", "AgeRestriction")
                        .WithMany()
                        .HasForeignKey("AgeRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustWriteAPI.Models.Database.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.ArticleActivity", b =>
                {
                    b.HasOne("JustWriteAPI.Models.Database.Article", "Article")
                        .WithMany("ArticleActivities")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustWriteAPI.Models.Database.Author", "Author")
                        .WithMany("ArticleActivities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.ArticleTag", b =>
                {
                    b.HasOne("JustWriteAPI.Models.Database.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustWriteAPI.Models.Database.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.AuthorFollowing", b =>
                {
                    b.HasOne("JustWriteAPI.Models.Database.Author", "Author")
                        .WithMany("AuthorFollowings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustWriteAPI.Models.Database.Author", "FollowingAuthor")
                        .WithMany()
                        .HasForeignKey("FollowingAuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.Comment", b =>
                {
                    b.HasOne("JustWriteAPI.Models.Database.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustWriteAPI.Models.Database.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustWriteAPI.Models.Database.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustWriteAPI.Models.Database.CommentActivity", b =>
                {
                    b.HasOne("JustWriteAPI.Models.Database.Author", "Author")
                        .WithMany("CommentActivities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustWriteAPI.Models.Database.Comment", "Comment")
                        .WithMany("CommentActivities")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
